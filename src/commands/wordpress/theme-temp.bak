import WebscafBase from '../../webscaf-base'
import {
  CliUx,
} from '@oclif/core'
import * as chalk from 'chalk'
import * as inquirer from 'inquirer'
import {
  getTempDir,
  resolvePath,
  getAllFiles,
  removeTempDir,
  shellExecAsync,
} from '../../helpers'
import * as data from './data.json'

export default class Theme extends WebscafBase {
  async run(): Promise<void> {
    const {themes} = data
    const {typeOfTheme} = await inquirer.prompt([{
      type: 'list',
      name: 'typeOfTheme',
      message: 'What type of theme do you want to create?',
      choices: Object.keys(themes),
    }])
    const {nameOfTheme} = await inquirer.prompt([{
      type: 'input',
      name: 'nameOfTheme',
      message: 'What is the name of the theme?',
      default: 'WordPress Theme',
    }])
    const {themeDir} = await inquirer.prompt([{
      type: 'input',
      name: 'themeDir',
      message: 'Where do you want to save the theme?',
      default: './',
    }])

    const themeInfo = this.generateThemeInfo(nameOfTheme)

    const {themeDirName} = await inquirer.prompt([{
      type: 'input',
      name: 'themeDirName',
      message: 'What is the name of the theme directory?',
      default: themeInfo.kebabCase,
    }])

    try {
      const tempDir = getTempDir(`theme-${typeOfTheme}`)
      const {repo} = themes[typeOfTheme as keyof typeof themes][0]
      await shellExecAsync(`git clone ${repo} ${tempDir}/${themeInfo.kebabCase}`)
      this.renderThemeDetails(themeInfo)
    } catch (error) {
      this.log(error as any)
    } finally {
      removeTempDir(`theme-${typeOfTheme}`)
    }
  }

  renderThemeDetails(themeInfo: Record<string, string>): void {
    const themeDetails = {
      'Theme Name: ': `${themeInfo.themeName}`,
      'Theme Version: ': '1.0.0',
      'Text Domain: ': themeInfo.kebabCase,
      'Package: ': themeInfo.trainCase,
      'Namespace: ': themeInfo.pascalSnakeCase,
      'Function Prefix: ': themeInfo.snakeCaseWithUnderscoreSuffix,
      'CSS Class Prefix: ': themeInfo.kebabCaseWithHyphenSuffix,
      'PHP Variable Prefix: ': themeInfo.snakeCaseWithUnderscoreSuffix,
      'Version Constant: ': `${themeInfo.macroCase}_VERSION`,
      'Theme Directory Constant: ': `${themeInfo.macroCase}_TEMP_DIR`,
      'Theme Build Directory Constant: ': `${themeInfo.macroCase}_BUILD_DIR`,
      'Theme Build Directory URI Constant: ': `${themeInfo.macroCase}_BUILD_URI`,
    }

    const biggestStringLength = themeDetails['Theme Build Directory URI Constant: '].length + 'Theme Build Directory URI Constant: '.length

    this.log(chalk.green('\nTheme Details:'))
    this.log(
      chalk.yellow(`┌${'─'.repeat(biggestStringLength + 4)}┐`),
    )
    for (const key of Object.keys(themeDetails)) {
      this.log(
        chalk.yellow(`│ ${chalk.green(key)} ${chalk.blueBright(themeDetails[key as keyof typeof themeDetails])} ${' '.repeat(biggestStringLength - (themeDetails[key as keyof typeof themeDetails].length + key.length))} │`),
      )
    }

    this.log(
      chalk.yellow(`└${'─'.repeat(biggestStringLength + 4)}┘`),
    )
  }

  generateThemeInfo(themeName: string): Record<string, string> {
    const themeNameLowerCase = themeName.toLowerCase()

    const kebabCase = themeName.replace(/\s+/g, '-').toLowerCase()
    const snakeCase = kebabCase.replace(/-/g, '_')
    const kebabCaseWithHyphenSuffix = kebabCase + '-'
    const snakeCaseWithUnderscoreSuffix = snakeCase + '_'

    const trainCase = kebabCase.replace(/\b\w/g, l => {
      return l.toUpperCase()
    })
    const themeNameTrainCase = trainCase.replace(/-/g, ' ')
    const pascalSnakeCase = trainCase.replace(/-/g, '_')
    const trainCaseWithHyphenSuffix = trainCase + '-'
    const pascalSnakeCaseWithUnderscoreSuffix = pascalSnakeCase + '_'

    const cobolCase = kebabCase.toUpperCase()
    const themeNameCobolCase = themeNameTrainCase.toUpperCase()
    const macroCase = snakeCase.toUpperCase()
    const cobolCaseWithHyphenSuffix = cobolCase + '-'
    const macroCaseWithUnderscoreSuffix = macroCase + '_'

    return {
      themeName,
      themeNameLowerCase,
      kebabCase,
      snakeCase,
      kebabCaseWithHyphenSuffix,
      snakeCaseWithUnderscoreSuffix,
      trainCase,
      themeNameTrainCase,
      pascalSnakeCase,
      trainCaseWithHyphenSuffix,
      pascalSnakeCaseWithUnderscoreSuffix,
      cobolCase,
      themeNameCobolCase,
      macroCase,
      cobolCaseWithHyphenSuffix,
      macroCaseWithUnderscoreSuffix,
    }
  }

  contentToReplace(themeInfo:Record<string, string>): Record<string, string> {
    /* eslint-disable camelcase */
    return {
      'elementary theme': themeInfo.themeNameLowerCase,
      'Elementary Theme': themeInfo.themeName,
      'ELEMENTARY THEME': themeInfo.themeNameCobolCase,
      'elementary-theme': themeInfo.kebabCase,
      'Elementary-Theme': themeInfo.trainCase,
      'ELEMENTARY-THEME': themeInfo.cobolCase,
      elementary_theme: themeInfo.snakeCase,
      Elementary_Theme: themeInfo.pascalSnakeCase,
      ELEMENTARY_THEME: themeInfo.macroCase,
      'elementary-theme-': themeInfo.kebabCaseWithHyphenSuffix,
      'Elementary-Theme-': themeInfo.trainCaseWithHyphenSuffix,
      'ELEMENTARY-THEME-': themeInfo.cobolCaseWithHyphenSuffix,
      elementary_theme_: themeInfo.snakeCaseWithUnderscoreSuffix,
      Elementary_Theme_: themeInfo.pascalSnakeCaseWithUnderscoreSuffix,
      ELEMENTARY_THEME_: themeInfo.macroCaseWithUnderscoreSuffix,
    }
    /* eslint-enable camelcase */
  }
}
